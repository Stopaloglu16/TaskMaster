@page "/taskitemmanager/{TaskListId:int}"

@using Application.Aggregates.TaskItemAggregate.Commands.CreateUpdate
@using Application.Aggregates.TaskItemAggregate.Queries
@using Application.Aggregates.TaskListAggregate.Commands.CreateUpdate
@using Application.Aggregates.TaskListAggregate.Queries
@using Application.Common.Models
@using Domain.Enums
@using WebsiteApp.Services
@using TaskMasterRazorClassLibrary

@inject IWebApiService<TaskListDto, TaskListDto> _taskListService
@inject IWebApiService<TaskItemDto, TaskItemDto> _taskItemService
@inject IWebApiService<TaskItemFormRequest, TaskItemFormRequest> _taskItemFormService
@inject IWebApiService<TaskItemFormRequest, HttpResponseMessage> _taskItemFormCrudService
@inject NavigationManager NavigationManager

@inject NotificationService NotificationService

@rendermode InteractiveServer

<PageTitle>Task Item</PageTitle>

<div class="container mt-3">
    <div class="card">
        <div class="card-header">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="/home" Text="Home" />
                <RadzenBreadCrumbItem Path="/taskmanager" Text="Task Manager" />
                <RadzenBreadCrumbItem Text="Task Item" />
            </RadzenBreadCrumb>
        </div>
        <div class="card-header">
            <RadzenButton Icon="add"
            Text="New"
            ButtonStyle="ButtonStyle.Primary"
            Variant="Variant.Flat"
            Size="ButtonSize.Medium"
            class="rz-my-1 rz-ms-1" Click="@(args => EditTaskItem(0))" />
            <h2>@taskListDto.Title</h2>
        </div>
        <div class="card-body">

            <div class="card-body">
                <RadzenStack Gap="1rem">
                    <RadzenDataGrid @ref=@gridItemsProvider TItem="TaskItemDto" Data="@taskItemList" LoadData="@LoadTaskItemAsync" IsLoading="@isLoading"
                    AllowPaging="true" AllowSorting="false" PagerHorizontalAlign="HorizontalAlign.Center"
                    Count="@totalItemCount">
                        <Columns>
                            <RadzenDataGridColumn Property="@nameof(TaskItemDto.Title)" Title="Title" />
                            <RadzenDataGridColumn Property="@nameof(TaskItemDto.Description)" Title="Description" />
                            <RadzenDataGridColumn Property="@nameof(TaskItemDto.CompletedDate)" Title="CompletedDate" />
                            <RadzenDataGridColumn TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                                <Template Context="task">
                                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                    class="rz-my-1 rz-ms-1" Click="@(async () => await EditTaskItem(task.Id))" />
                                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                    class="rz-my-1 rz-ms-1" Click="@(() => ActionItem(task, 1))" />
                                </Template>
                            </RadzenDataGridColumn>
                        </Columns>
                    </RadzenDataGrid>
                </RadzenStack>
            </div>

            @*     @if (gridItemsProvider == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <div class="grid">
                    <QuickGrid ItemsProvider="@gridItemsProvider" @ref="taskItemDtoGrid">
                        <PropertyColumn Property="@(p => p.Title)" Title="Title" Sortable="true" />
                        <PropertyColumn Property="@(p => p.Description)" Title="Description" Sortable="true" />
                        <PropertyColumn Property="@(p => p.CompletedDate)" Title="Completed Date" Format="yyyy-MM-dd" Sortable="true" />
                        <TemplateColumn Title="Actions">
                            <button class="btn btn-success" @onclick="@(() => EditTaskItem(context.Id))"><span class="bi bi-pencil"></span> </button>
                            <button class="btn btn-danger" @onclick="@(() => ActionItem(context , 1))"><span class="bi bi-trash"></span></button>
                        </TemplateColumn>
                    </QuickGrid>
                </div>

            } *@
        </div>
        <div class="card-footer">
        </div>
    </div>
</div>


@if (TaskItemModalOpen)
{
    <TaskItemModal taskItemFormRequest="@taskItemFormRequest"
                   OnClose="@SaveTaskItemModel">
    </TaskItemModal>
}


@if (ActionPerItemModalOpen)
{
    <ActionPerItemModal ActionItemText="@ActionItemText" 
                        ActionText="@ActionName" 
                        OnCloseModal="@OnActionPerItemModalClose">
    </ActionPerItemModal>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter]
    public int TaskListId { get; set; }


    RadzenDataGrid<TaskItemDto> gridItemsProvider;
    IEnumerable<TaskItemDto> taskItemList;
    ODataEnumerable<TaskItemDto> taskItemDtos;

    bool isLoading;
    private int totalItemCount = 0;

    public bool TaskItemModalOpen = false;
    public TaskItemFormRequest taskItemFormRequest { get; set; }

    public TaskListDto taskListDto { get; set; } = new TaskListDto() { Title = "" };

    /// <summary>
    /// old old old
    /// </summary>

    // public GridItemsProvider<TaskItemDto>? gridItemsProvider;
    // private int totalItemCount = 0; // Manages total items across all pages
    // public TaskListDto taskListDto { get; set; }
    // public bool TaskItemModalOpen = false;
    // public TaskItemFormRequest taskItemFormRequest { get; set; }

    // QuickGrid<TaskItemDto> taskItemDtoGrid; //Added into QucikGrid @ref="myGrid"

    

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if (user?.Identity?.IsAuthenticated != true)
            NavigationManager.NavigateTo("/", true);

      
     //    if (taskListDto == null)
     //    {
     //        toastService.ShowWarning($"Task not found");

     //    }
     //    else
     //    {
     //        gridItemsProvider = async req =>
     // {
     //     var response = await _taskItemService.GetAllDataAsync($"taskitem?taskListId={TaskListId}");

     //     if (response != null)
     //     {
     //         // Update total item count for pagination
     //         totalItemCount = response.Count;

     //         // Return the grid data
     //         return GridItemsProviderResult.From(response, response.Count);
     //     }
     //     else
     //     {
     //         // Log or handle the null response scenario
     //         Console.Error.WriteLine("Failed to load task list data. API returned null.");
     //         return GridItemsProviderResult.From<TaskItemDto>((ICollection<TaskItemDto>)Enumerable.Empty<TaskItemDto>().ToList(), 0);
     //     }
     // };
        //}


        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
               var taskListDto = await _taskListService.GetDataByIdAsync($"tasklist/{TaskListId}");


            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }



    private async Task LoadTaskItemAsync(LoadDataArgs args)
    {
        try
        {
            isLoading = true;
          
            var response = await _taskItemService.GetAllDataAsync($"taskitem?taskListId={TaskListId}");

            if (response != null)
            {
                totalItemCount = response.Count;

                taskItemDtos = response.AsODataEnumerable();
                // Return the grid data
                taskItemList = response;
            }
            else
            {
                // Log or handle the null response scenario
                Console.Error.WriteLine("Failed to load task list data. API returned null.");
            }

            isLoading = false;
        }
        catch (Exception)
        {
            throw;
        }
    }


    protected async Task DeleteTasklist(TaskItemDto taskItemDto)
    {
        await Task.Delay(1000);
    }


    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }


    #region Modal

    private async Task ModalSuccess()
    {
        TaskItemModalOpen = false;
        ActionPerItemModalOpen = false;
        
        await gridItemsProvider.RefreshDataAsync();

        StateHasChanged();
    }

    protected async Task EditTaskItem(int Id)
    {
        if (Id > 0)
        {
            var apiReturn = await _taskItemFormService.GetDataByIdAsync($"taskitem/{Id}");
            taskItemFormRequest = apiReturn;
        }
        else
        {
            taskItemFormRequest = new TaskItemFormRequest() { TaskListId = TaskListId, Title = "", Description = "" };
        }

        TaskItemModalOpen = true;
    }

    protected async Task SaveTaskItemModel(TaskItemFormRequest taskItemFormRequest)
    {
        if (taskItemFormRequest == null)
        {
            TaskItemModalOpen = false;
        }
        else
        {

            HttpResponseMessage apiReturn;
            if (taskItemFormRequest.Id > 0)
            {
                apiReturn = await _taskItemFormCrudService.UpdateAsync("taskitem", taskItemFormRequest.Id, taskItemFormRequest);
            }
            else
            {
                apiReturn = await _taskItemFormCrudService.SaveAsync("taskitem", taskItemFormRequest);
            }

            if (apiReturn.IsSuccessStatusCode)
            {
                //toastService.ShowSuccess($"{taskItemFormRequest.Title} is {ActionNameModel.Saved}");

                ShowNotification(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = ActionNameModel.Saved,
                        Detail = $"{taskItemFormRequest.Title} is {ActionNameModel.Saved}",
                        Duration = 4000
                    });

                await ModalSuccess();
            }
        }
    }

    #endregion


    #region ActionPerItemModal

    private bool ActionPerItemModalOpen { get; set; } = false;

    private int ItemIdAction;
    private string ActionItemText = "";

    public string ActionName { get; set; }
    private int ActionTypeId { get; set; }

    public void ActionItem(TaskItemDto taskItemDto, int _ActionTypeId)
    {
        ItemIdAction = taskItemDto.Id;
        ActionItemText = taskItemDto.Title;
        ActionTypeId = _ActionTypeId;

        if (ActionTypeId == 1)
        {
            ActionName = ActionNameModel.Delete;
        }

        ActionPerItemModalOpen = true;
    }



    private async Task OnActionPerItemModalClose(bool RtnAction)
    {
        if (RtnAction == false)
        {
            ActionPerItemModalOpen = false;
        }
        else
        {
            bool IsSuccess = false;

            if (ActionTypeId == 1)
            {
                var apiReturn = await _taskItemService.DeleteAsync($"taskitem", ItemIdAction);
                IsSuccess = apiReturn.IsSuccessStatusCode;
            }

            if (IsSuccess)
            {
               // toastService.ShowSuccess($"{ActionItemText} {ActionName}d");

                 ShowNotification(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = "Deleted",
                        Detail = $"{ActionItemText} {ActionName}d",
                        Duration = 4000
                    });

                await ModalSuccess();
            }
        }
    }

    #endregion

}