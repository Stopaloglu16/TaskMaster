@page "/taskitemmanager/{TaskListId:int}"

@using Application.Aggregates.TaskItemAggregate.Commands.CreateUpdate
@using Application.Aggregates.TaskItemAggregate.Queries
@using Application.Aggregates.TaskListAggregate.Commands.CreateUpdate
@using Application.Aggregates.TaskListAggregate.Queries
@using Application.Common.Models
@using Domain.Enums
@using WebsiteApp.Services
﻿@using Microsoft.AspNetCore.Components.QuickGrid
@using TaskMasterRazorClassLibrary

@inject IWebApiService<TaskListDto, TaskListDto> _taskListService
@inject IWebApiService<TaskItemDto, TaskItemDto> _taskItemService
@inject IWebApiService<TaskItemFormRequest, TaskItemFormRequest> _taskItemFormService
@inject IWebApiService<TaskItemFormRequest, HttpResponseMessage> _taskItemFormCrudService
@inject NavigationManager NavigationManager

@inject TaskMasterRazorClassLibrary.Services.IToastService toastService

@rendermode InteractiveServer


<div class="container mt-3">
    @if (taskListDto != null)
    {
        <h2> @taskListDto.Title</h2>
    }

    <div class="card">
        <div class="card-header">

            <button class="btn btn-primary" type="button" @onclick="@(() => EditTaskItem(0))">New Task</button>
        </div>
        <div class="card-body">

            @if (gridItemsProvider == null)
            {
                <p>Loading...</p>
            }
            else
            {
                <div class="grid">
                    <QuickGrid ItemsProvider="@gridItemsProvider" @ref="taskItemDtoGrid">
                        <PropertyColumn Property="@(p => p.Title)" Title="Title" Sortable="true" />
                        <PropertyColumn Property="@(p => p.Description)" Title="Description" Sortable="true" />
                        <PropertyColumn Property="@(p => p.CompletedDate)" Title="Completed Date" Format="yyyy-MM-dd" Sortable="true" />
                        <TemplateColumn Title="Actions">
                            <button class="btn btn-success" @onclick="@(() => EditTaskItem(context.Id))"><span class="bi bi-pencil"></span> </button>
                            <button class="btn btn-danger" @onclick="@(() => ActionItem(context , 1))"><span class="bi bi-trash"></span></button>
                        </TemplateColumn>
                    </QuickGrid>
                </div>

            }
        </div>
        <div class="card-footer">
        </div>
    </div>
</div>


@if (TaskItemModalOpen)
{
    <TaskItemModal taskItemFormRequest="@taskItemFormRequest"
                   OnClose="@SaveTaskItemModel">
    </TaskItemModal>
}

@if (ActionPerItemModalOpen)
{
    <ActionPerItemModal ActionItemText="@ActionItemText"
                        ActionText="@ActionName"
                        OnCloseModal="@OnActionPerItemModalClose">
    </ActionPerItemModal>
}

@code {

    [Parameter]
    public int TaskListId { get; set; }

    public GridItemsProvider<TaskItemDto>? gridItemsProvider;
    private int totalItemCount = 0; // Manages total items across all pages
    public TaskListDto taskListDto { get; set; }
    public bool TaskItemModalOpen = false;
    public TaskItemFormRequest taskItemFormRequest { get; set; }

    QuickGrid<TaskItemDto> taskItemDtoGrid; //Added into QucikGrid @ref="myGrid"

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if (user?.Identity?.IsAuthenticated != true)
            NavigationManager.NavigateTo("/", true);

        taskListDto = await _taskListService.GetDataByIdAsync($"tasklist/{TaskListId}");

        if (taskListDto == null)
        {
            toastService.ShowWarning($"Task not found");

        }
        else
        {
            gridItemsProvider = async req =>
     {
         var response = await _taskItemService.GetAllDataAsync($"taskitem?taskListId={TaskListId}");

         if (response != null)
         {
             // Update total item count for pagination
             totalItemCount = response.Count;

             // Return the grid data
             return GridItemsProviderResult.From(response, response.Count);
         }
         else
         {
             // Log or handle the null response scenario
             Console.Error.WriteLine("Failed to load task list data. API returned null.");
             return GridItemsProviderResult.From<TaskItemDto>((ICollection<TaskItemDto>)Enumerable.Empty<TaskItemDto>().ToList(), 0);
         }
     };
        }



        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }


    private async Task LoadTaskItemAsync()
    {
        if (taskItemDtoGrid != null)
        {
            await taskItemDtoGrid.RefreshDataAsync();
        }
    }


    protected async Task DeleteTasklist(TaskItemDto taskItemDto)
    {
        await Task.Delay(1000);
    }



    #region Modal

    private async Task ModalSuccess()
    {
        TaskItemModalOpen = false;
        ActionPerItemModalOpen = false;
        await LoadTaskItemAsync(); // Reload data with the updated page size
        StateHasChanged();
    }

    protected async Task EditTaskItem(int Id)
    {
        if (Id > 0)
        {
            var apiReturn = await _taskItemFormService.GetDataByIdAsync($"tasklist/{Id}");
            taskItemFormRequest = apiReturn;
        }
        else
        {
            taskItemFormRequest = new TaskItemFormRequest() { TaskListId = TaskListId, Title = "", Description = "" };
        }

        TaskItemModalOpen = true;
    }

    protected async Task SaveTaskItemModel(TaskItemFormRequest taskItemFormRequest)
    {
        if (taskItemFormRequest == null)
        {
            TaskItemModalOpen = false;
        }
        else
        {

            HttpResponseMessage apiReturn;
            if (taskItemFormRequest.Id > 0)
            {
                apiReturn = await _taskItemFormCrudService.UpdateAsync("taskitem", taskItemFormRequest.Id, taskItemFormRequest);
            }
            else
            {
                apiReturn = await _taskItemFormCrudService.SaveAsync("taskitem", taskItemFormRequest);
            }

            if (apiReturn.IsSuccessStatusCode)
            {
                toastService.ShowSuccess($"{taskItemFormRequest.Title} is {ActionNameModel.Saved}");
                await ModalSuccess();
            }
        }
    }

    #endregion


    #region ActionPerItemModal

    private bool ActionPerItemModalOpen { get; set; } = false;

    private int ItemIdAction;
    private string ActionItemText = "";

    public string ActionName { get; set; }
    private int ActionTypeId { get; set; }

    public void ActionItem(TaskItemDto taskItemDto, int _ActionTypeId)
    {
        ItemIdAction = taskItemDto.Id;
        ActionItemText = taskItemDto.Title;
        ActionTypeId = _ActionTypeId;

        if (ActionTypeId == 1)
        {
            ActionName = ActionNameModel.Delete;
        }

        ActionPerItemModalOpen = true;
    }



    private async Task OnActionPerItemModalClose(bool RtnAction)
    {
        if (RtnAction == false)
        {
            ActionPerItemModalOpen = false;
        }
        else
        {
            bool IsSuccess = false;

            if (ActionTypeId == 1)
            {
                var apiReturn = await _taskItemService.DeleteAsync($"taskitem", ItemIdAction);
                IsSuccess = apiReturn.IsSuccessStatusCode;
            }

            if (IsSuccess)
            {
                toastService.ShowSuccess($"{ActionItemText} {ActionName}d");

                await ModalSuccess();
            }
        }
    }

    #endregion

}