@page "/usermanager"

@using Application.Aggregates.UserAggregate.Commands
@using Application.Aggregates.UserAggregate.Queries
@using Application.Common.Models
@using Domain.Enums
@using WebsiteApp.Services
﻿@using Microsoft.AspNetCore.Components.QuickGrid

@inject IWebApiService<UserDto, UserDto> _userService
@inject IWebApiService<CreateUserRequest, CreateUserRequest> _createUserService
@inject IWebApiService<UpdateUserRequest, UpdateUserRequest> _updateUserService
@inject NavigationManager NavigationManager

<div class="container mt-3">
    <h2>User Manager</h2>
    <div class="card">
        <div class="card-header">
            <button class="btn btn-primary" type="button" @onclick="@(() => EditUser(0))">New</button>
        </div>
        <div class="card-body">


            @if (gridItemsProvider == null)
            {
                <p>Loading...</p>
            }
            else
            {
                @if (pagination.TotalItemCount == 0)
                {
                    <p>No item found! ⚠️</p>
                }
                else
                {

                    <div class="page-size-chooser">
                        Items per page:
                        <select @bind="ItemsPerPage">
                            <option>5</option>
                            <option>10</option>
                            <option>20</option>
                            <option>50</option>
                        </select>
                    </div>

                    <div class="grid">
                        <QuickGrid ItemsProvider="@gridItemsProvider" Pagination="@pagination" @ref="userListDtoGrid">
                            <PropertyColumn Property="@(p => p.FullName)" Title="Full name" Sortable="true" />
                            <PropertyColumn Property="@(p => p.UserEmail)" Title="Email" Sortable="true" />
                            <PropertyColumn Property="@(p => p.UserType)" Title="User Type" Sortable="true" />
                            <TemplateColumn Title="Actions">
                                <button class="btn btn-success" @onclick="@(() => EditUser(context.Id))"><span class="bi bi-pencil"></span> </button>
                                <button class="btn btn-danger" @onclick="@(() => DeleteTasklist(context))"><span class="bi bi-trash"></span></button>
                            </TemplateColumn>
                        </QuickGrid>
                    </div>
                }
            }

        </div>
        <div class="card-footer">
            <nav role="navigation">
                @if (pagination.TotalItemCount.HasValue)
                {
                    var lastIx = (int)pagination.LastPageIndex + 1;

                    <button class="btn btn-default" type="button" title="Go to first page" @onclick="@(() => GoToPageAsync(0))">
                        <span class="bi bi-caret-left-square-fill"></span>
                    </button>
                    <button class="btn btn-light" type="button" title="Go to previous page" @onclick="@(() => GoToPageAsync((int)(currentPageIndex-1)))">
                        <span class="bi bi-caret-left-fill"></span>
                    </button>
                    <div class="pagination-text">
                        Page <strong b-3qssc0bm46="">@((int)currentPageIndex + 1)</strong>
                        of <strong b-3qssc0bm46=""> @lastIx</strong>
                    </div>
                    <button class="btn btn-light" type="button" title="Go to next page" @onclick="@(() => GoToPageAsync((int)(currentPageIndex+1)))">
                        <span class="bi bi-caret-right-fill"></span>
                    </button>
                    <button class="btn btn-light" type="button" title="Go to last page" @onclick="@(() => GoToPageAsync((int)pagination.LastPageIndex))">
                        <span class="bi bi-caret-right-square-fill"></span>
                    </button>
                }
            </nav>
        </div>
    </div>
</div>


@if (UserModalOpen)
{
    <UserModal userFormRequest="@userFormRequest" userTypeList="@userTypeList"
    OnClose="@SaveUserModel">
    </UserModal>
}


@code {

    public PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    public GridItemsProvider<UserDto>? gridItemsProvider;
    private int? totalItemCount; // Manages total items across all pages

    private int? currentPageIndex = 0;
    private int? lastPageIndex = 0;
    private int pageNumber = 0;
    private int _itemsPerPage = 10;

    private int ItemsPerPage
    {
        get => _itemsPerPage;
        set
        {
            if (_itemsPerPage != value)
            {
                _itemsPerPage = value;
                OnItemsPerPageChanged(); // Trigger change handler
            }
        }
    }


    public bool UserModalOpen = false;
    public UserFormRequest userFormRequest { get; set; }

    QuickGrid<UserDto> userListDtoGrid; //Added into QucikGrid @ref="myGrid"
    private List<UserType> userTypeList { get; set; } = new List<UserType>();

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var authState = await authenticationState;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
            NavigationManager.NavigateTo("/", true);

        // Fetch paginated data
        pageNumber = pagination.CurrentPageIndex + 1; // Convert to 1-based index
        pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();


        gridItemsProvider = async req =>
        {
            var response = await _userService.GetPagingDataAsync(
                $"Users/userlist?PageNumber={pageNumber}&PageSize={ItemsPerPage}&OrderBy=Id&IsDescending=false", true);

            if (response != null)
            {
                // Update total item count for pagination
                totalItemCount = response.TotalCount;

                // Return the grid data
                return GridItemsProviderResult.From(response.Items.ToList(), response.TotalCount);
            }
            else
            {
                // Log or handle the null response scenario
                Console.Error.WriteLine("Failed to load task list data. API returned null.");
                return GridItemsProviderResult.From<UserDto>((ICollection<UserDto>)Enumerable.Empty<UserDto>().ToList(), 0);
            }
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userTypeList = new List<UserType>();

            foreach (UserType userType in Enum.GetValues(typeof(UserType)))
            {
                userTypeList.Add(userType);
            }

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnItemsPerPageChanged()
    {
        currentPageIndex = 0;
        pagination.ItemsPerPage = ItemsPerPage; // Update pagination state
        await pagination.SetCurrentPageIndexAsync(0); // Reset to the first page
        await LoadUserListAsync(); // Reload data with the updated page size

        StateHasChanged();
    }


    private async Task GoToPageAsync(int pageIndex)
    {
        currentPageIndex = pageIndex;
        //pagination.ItemsPerPage = ItemsPerPage;
        await pagination.SetCurrentPageIndexAsync(pageIndex);
        await LoadUserListAsync();


        StateHasChanged();
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;


    private string? AriaCurrentValue(int pageIndex)
      => pagination.CurrentPageIndex == pageIndex ? "page" : null;




    private async Task LoadUserListAsync()
    {
        // // Fetch paginated data
        // var pageNumber = pagination.CurrentPageIndex + 1; // Convert to 1-based index
        // //var pageSize = pagination.ItemsPerPage;

        // gridItemsProvider = async req =>
        // {
        //     var userListDtos = await _userService.GetPagingDataAsync(
        //     $"Users/userlist?PageNumber={pageNumber}&PageSize={ItemsPerPage}&OrderBy=Id&IsDescending=false", true);

        //     return GridItemsProviderResult.From(userListDtos.Items.ToList(), userListDtos.TotalCount);
        // };

        //StateHasChanged();


        if (userListDtoGrid != null)
        {
            // Fetch paginated data
            //pageNumber = pagination.CurrentPageIndex + 1; // Convert to 1-based index
            //var pageSize = pagination.ItemsPerPage;

            //pagination.TotalItemCountChanged += (sender, eventArgs) => StateHasChanged();

            await userListDtoGrid.RefreshDataAsync();
        }
    }


    protected async Task DeleteTasklist(UserDto userDto)
    {
        await Task.Delay(1000);
    }



    #region Modal

    private async Task ModalSuccess()
    {
        UserModalOpen = false;
        //ActionPerItemModalOpen = false;
        await LoadUserListAsync(); // Reload data with the updated page size
        StateHasChanged();
    }

    protected async Task EditUser(int Id)
    {
        if (Id > 0)
        {
            var apiReturn = await _userService.GetDataByIdAsync($"users/user/{Id}", true);

            userFormRequest = new UserFormRequest()
                {
                    Id = apiReturn.Id,
                    FullName = apiReturn.FullName,
                    UserEmail = apiReturn.UserEmail,
                    UserType = apiReturn.UserType
                };
        }
        else
        {
            userFormRequest = new UserFormRequest() { Id = 0, FullName = "", UserEmail = "" };
        }

        UserModalOpen = true;
    }

    protected async Task SaveUserModel(UserFormRequest userFormRequest)
    {
        if (userFormRequest == null)
        {
            UserModalOpen = false;
        }
        else
        {
            HttpResponseMessage apiReturn;

            if (userFormRequest.Id > 0)
            {
                UpdateUserRequest updateUserRequest = new UpdateUserRequest()
                    {
                        Id = userFormRequest.Id,
                        FullName = userFormRequest.FullName,
                        UserEmail = userFormRequest.UserEmail
                    };

                apiReturn = await _updateUserService.UpdateAsync("users", userFormRequest.Id, updateUserRequest);
            }
            else
            {
                CreateUserRequest createUserRequest = new CreateUserRequest()
                    {
                        FullName = userFormRequest.FullName,
                        UserEmail = userFormRequest.UserEmail,
                        UserType = userFormRequest.UserType
                    };
                apiReturn = await _createUserService.SaveAsync("users", createUserRequest, true);
            }

            //UserModalOpen = false;

            if(apiReturn.IsSuccessStatusCode)
            {
                await ModalSuccess();
            }

        }

        //StateHasChanged();

    }

    #endregion

}