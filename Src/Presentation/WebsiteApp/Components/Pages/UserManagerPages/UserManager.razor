@page "/usermanager"


@using Application.Aggregates.UserAggregate.Commands
@using Application.Aggregates.UserAggregate.Queries
@using Application.Common.Models
@using Domain.Enums
@using WebsiteApp.Services
﻿@using Microsoft.AspNetCore.Components.QuickGrid

@inject IWebApiService<UserDto, UserDto> _userService
@inject IWebApiService<CreateUserRequest, CreateUserRequest> _createUserService
@inject IWebApiService<UpdateUserRequest, UpdateUserRequest> _updateUserService

<div class="container mt-3">
    <h2>User Manager</h2>
    <div class="card">
        <div class="card-header">
            <button class="btn btn-primary" type="button" @onclick="@(() => EditTasklist(0))">New</button>
        </div>
        <div class="card-body">
            <div class="page-size-chooser">
                Items per page:
                <select @bind="ItemsPerPage">
                    <option>5</option>
                    <option>10</option>
                    <option>20</option>
                    <option>50</option>
                </select>
            </div>

            <div class="grid">
                <QuickGrid ItemsProvider="@gridItemsProvider" Pagination="@pagination">
                    <PropertyColumn Property="@(p => p.FullName)" Title="Full name" Sortable="true" />
                    <PropertyColumn Property="@(p => p.UserEmail)" Title="Email" Sortable="true" />
                    <PropertyColumn Property="@(p => p.UserType)" Title="User Type" Sortable="true" />
                    <TemplateColumn Title="Actions">
                        <button class="btn btn-success" @onclick="@(() => EditTasklist(context.Id))"><i class="oi oi-pencil"></i> </button>
                        <button class="btn btn-danger" @onclick="@(() => DeleteTasklist(context))"><i class="oi oi-trash"></i></button>
                    </TemplateColumn>
                </QuickGrid>
            </div>
        </div>
        <div class="card-footer">
            <nav role="navigation">
                @if (pagination.TotalItemCount.HasValue)
                {
                    var lastIx = (int)pagination.LastPageIndex + 1;

                    <button class="oi oi-arrow-circle-left" type="button" title="Go to first page" @onclick="@(() => GoToPageAsync(0))"></button>
                    <button class="oi oi-arrow-thick-left" type="button" title="Go to previous page" @onclick="@(() => GoToPageAsync((int)(currentPageIndex-1)))"></button>
                    <div class="pagination-text">
                        Page <strong b-3qssc0bm46="">@((int)currentPageIndex + 1)</strong>
                        of <strong b-3qssc0bm46=""> @lastIx</strong>
                    </div>
                    <button class="oi oi-arrow-thick-right" type="button" title="Go to next page" @onclick="@(() => GoToPageAsync((int)(currentPageIndex+1)))"></button>
                    <button class="oi oi-arrow-circle-right" type="button" title="Go to last page" @onclick="@(() => GoToPageAsync((int)pagination.LastPageIndex))"></button>
                }
            </nav>
        </div>
    </div>
</div>


@if (UserModalOpen)
{
    <UserModal userFormRequest="@userFormRequest" userTypeList="@userTypeList"
               OnClose="@SaveTaskListModel">
    </UserModal>
}


@code {

    public PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    public GridItemsProvider<UserDto>? gridItemsProvider;
    private int? totalItemCount; // Manages total items across all pages

    private int? currentPageIndex = 0;
    private int? lastPageIndex = 0;

    private int _itemsPerPage = 10;

    private int ItemsPerPage
    {
        get => _itemsPerPage;
        set
        {
            if (_itemsPerPage != value)
            {
                _itemsPerPage = value;
                OnItemsPerPageChanged(); // Trigger change handler
            }
        }
    }


    public bool UserModalOpen = false;
    public UserFormRequest userFormRequest { get; set; }
    private List<UserType> userTypeList { get; set; } = new List<UserType>();


    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            userTypeList = new List<UserType>();

            foreach (UserType userType in Enum.GetValues(typeof(UserType)))
            {
                userTypeList.Add(userType);
            }


            await OnItemsPerPageChanged();

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnItemsPerPageChanged()
    {
        currentPageIndex = 0;
        pagination.ItemsPerPage = ItemsPerPage; // Update pagination state
        await pagination.SetCurrentPageIndexAsync(0); // Reset to the first page
        await LoadUserListAsync(); // Reload data with the updated page size

        StateHasChanged();
    }


    private async Task GoToPageAsync(int pageIndex)
    {
        currentPageIndex = pageIndex;
        //pagination.ItemsPerPage = ItemsPerPage;
        await pagination.SetCurrentPageIndexAsync(pageIndex);
        await LoadUserListAsync();


        StateHasChanged();
    }

    private string? PageButtonClass(int pageIndex)
        => pagination.CurrentPageIndex == pageIndex ? "current" : null;


    private string? AriaCurrentValue(int pageIndex)
      => pagination.CurrentPageIndex == pageIndex ? "page" : null;




    private async Task LoadUserListAsync()
    {
        // Fetch paginated data
        var pageNumber = pagination.CurrentPageIndex + 1; // Convert to 1-based index
                                                          //var pageSize = pagination.ItemsPerPage;

        gridItemsProvider = async req =>
        {
            var userListDtos = await _userService.GetPagingDataAsync(
            $"Users/userlist?PageNumber={pageNumber}&PageSize={ItemsPerPage}&OrderBy=Id&IsDescending=false", true);

            return GridItemsProviderResult.From(userListDtos.Items.ToList(), userListDtos.TotalCount);
        };

        //StateHasChanged();
    }


    protected async Task DeleteTasklist(UserDto userDto)
    {
        await Task.Delay(1000);
    }



    #region Modal


    protected async Task EditTasklist(int Id)
    {
        if (Id > 0)
        {
            var apiReturn = await _userService.GetDataByIdAsync($"users/user/{Id}", true);

            userFormRequest = new UserFormRequest()
                {
                    Id = apiReturn.Id,
                    FullName = apiReturn.FullName,
                    UserEmail = apiReturn.UserEmail,
                    UserType = apiReturn.UserType
                };
        }
        else
        {
            userFormRequest = new UserFormRequest() { Id = 0, FullName = "", UserEmail = "" };
        }

        UserModalOpen = true;
    }

    protected async Task SaveTaskListModel(UserFormRequest userFormRequest)
    {
        if (userFormRequest == null)
        {
            UserModalOpen = false;
        }
        else
        {
            if (userFormRequest.Id > 0)
            {
                UpdateUserRequest updateUserRequest = new UpdateUserRequest()
                    {
                        Id = userFormRequest.Id,
                        FullName = userFormRequest.FullName,
                        UserEmail = userFormRequest.UserEmail
                    };

                var apiReturn = await _updateUserService.UpdateAsync("users", userFormRequest.Id, updateUserRequest);
            }
            else
            {
                CreateUserRequest createUserRequest = new CreateUserRequest()
                    {
                        FullName = userFormRequest.FullName,
                        UserEmail = userFormRequest.UserEmail,
                        UserType = userFormRequest.UserType
                    };
                var apiReturn = await _createUserService.SaveAsync("users", createUserRequest, true);
            }

            UserModalOpen = false;
        }

        StateHasChanged();

    }

    #endregion

}