@page "/forgotpassword"
@layout Layout.LoginLayout

@using Application.Aggregates.UserAuthAggregate
@using WebsiteApp.Services

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IAuthService authService
@inject IJSRuntime jsRunTime
@inject NavigationManager Navigation


<RadzenStack Gap="0" class="rz-py-8 rz-px-12">
    <RadzenAlert Visible="@IsVisibleReturnMesssage" AllowClose="false" AlertStyle="AlertStyle.Warning " Variant="Variant.Flat" Shade="Shade.Lighter">
        @ReturnMesssage
    </RadzenAlert>
</RadzenStack>

<RadzenTemplateForm Data="@forgotPasswordRequest" Submit="@(async (ForgotPasswordRequest args) => await RegisterSubmit(args))">
    <RadzenRow Gap="2rem" class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="6" SizeMD="6">
            <RadzenStack JustifyContent="JustifyContent.Center">
                <RadzenFieldset Text="Forgot password">
                    <RadzenStack Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="2" SizeMD="2">
                                <RadzenLabel Text="Username" Component="Username" />
                            </RadzenColumn>
                            <RadzenColumn Size="10" SizeMD="10">
                                <RadzenTextBox @bind-Value="forgotPasswordRequest.Username" Name="Username" Placeholder="user name" />
                                <RadzenRequiredValidator Component="Username" Text="Username is required" Style="position: absolute;" />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>

    <RadzenRow Gap="1rem" class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="6" SizeMD="6">
            <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" Gap="1rem" class="rz-mt-8 rz-mb-4">
                <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Text="Submit" />
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenTemplateForm>


@code {


    public ForgotPasswordRequest forgotPasswordRequest { get; set; }
    private string ReturnMesssage { get; set; }
    private bool IsVisibleReturnMesssage { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected async override Task OnParametersSetAsync()
    {
        forgotPasswordRequest = new ForgotPasswordRequest
            {
                Username = string.Empty,
            };
        await base.OnParametersSetAsync();
    }


    private async Task RegisterSubmit(ForgotPasswordRequest forgotPasswordRequest)
    {
        try
        {
            var returnedUser = await authService.ForgotPasswordRequestAsync(forgotPasswordRequest);

            if (returnedUser.IsSuccess)
            {
                NavigationManager.NavigateTo("/login", false);
            }
            else
            {
                IsVisibleReturnMesssage = true;
                ReturnMesssage = returnedUser.Error;
            }
        }
        catch (Exception ex)
        {
            ReturnMesssage = ex.Message;
        }

        StateHasChanged();
    }
}
