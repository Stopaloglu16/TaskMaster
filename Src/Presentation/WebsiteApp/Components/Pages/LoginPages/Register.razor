@page "/register/{username}/{token}"
@layout Layout.LoginLayout

@using Application.Aggregates.UserAuthAggregate
@using WebsiteApp.Services

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorageService
@inject IAuthService authService
@inject IJSRuntime jsRunTime
@inject NavigationManager Navigation


<RadzenStack Gap="0" class="rz-py-8 rz-px-12">
    <RadzenAlert Visible="@IsVisibleReturnMesssage" AllowClose="false" AlertStyle="AlertStyle.Warning " Variant="Variant.Flat" Shade="Shade.Lighter">
        @ReturnMesssage
    </RadzenAlert>
</RadzenStack>


<RadzenTemplateForm Data="@registerUserRequest" Submit="@(async (RegisterUserRequest args) => await RegisterSubmit(args))">
    <RadzenRow Gap="2rem" class="rz-p-0 rz-p-lg-4">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenStack>
                <RadzenFieldset Text="Register User">
                    <RadzenStack Gap="1rem">
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="4">
                                <RadzenLabel Text="Username" Component="Username" />
                            </RadzenColumn>
                            <RadzenColumn Size="8">
                                <RadzenTextBox @bind-Value="registerUserRequest.Username" Name="Username" Placeholder="user name" />
                                <RadzenRequiredValidator Component="Username" Text="Username is required" Style="position: absolute;" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Password1" Component="Password1" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenPassword @bind-Value="registerUserRequest.Password" Name="Password" Placeholder="Password"  />
                                <RadzenRequiredValidator Component="Password" Text="Password is required" Style="position: absolute;" />
                            </RadzenColumn>
                        </RadzenRow>
                        <RadzenRow AlignItems="AlignItems.Center">
                            <RadzenColumn Size="12" SizeMD="4">
                                <RadzenLabel Text="Confirm Password" Component="ConfirmPassword" />
                            </RadzenColumn>
                            <RadzenColumn Size="12" SizeMD="8">
                                <RadzenPassword @bind-Value="registerUserRequest.ConfirmPassword" Name="Confirm Password" Placeholder="Confirm Password" />
                                <RadzenRequiredValidator Component="ConfirmPassword" Text="ConfirmPassword is required" Style="position: absolute;" />
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenStack>
                </RadzenFieldset>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>

    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right" Gap="1rem" class="rz-mt-8 rz-mb-4">
        <RadzenButton ButtonType="ButtonType.Submit" Size="ButtonSize.Medium" Text="Submit" />
    </RadzenStack>

</RadzenTemplateForm>

@* 
<EditForm Model="@registerUserRequest" OnValidSubmit="@RegisterSubmit">
    <DataAnnotationsValidator />
    <div class="col-10 row">
        <input class="form-control col-12" @bind="registerUserRequest.Username" placeholder="User name" />
        &nbsp;<ValidationMessage For="@(() => registerUserRequest.Username)" />
    </div>
    <br />
    <div class="col-10 row">
        <input type="password" class="form-control col-12" @bind="registerUserRequest.Password" placeholder="Password" />
        &nbsp;<ValidationMessage For="@(() => registerUserRequest.Password)" />
    </div>
    <br />
    <div class="col-10 row">
        <input type="password" class="form-control col-12" @bind="registerUserRequest.ConfirmPassword" placeholder="Confirm password" />
        &nbsp;<ValidationMessage For="@(() => registerUserRequest.ConfirmPassword)" />
    </div>
    <br />
    <div class="col-5 row">
        <span class="col-12"></span>
        <input type="submit" class="form-control offset-1 col-10 btn btn-primary" value="Save" />
    </div>
    <br />
    <div class="col-10 row" style="text-align:left; font-weight:bold">
        <span class="col-12">@RegisterMesssage</span>
    </div>
</EditForm> *@

@code {

    [Parameter]
    public string username { get; init; }

    [Parameter]
    public string token { get; init; }

    public RegisterUserRequest registerUserRequest { get; set; }
    
    private string ReturnMesssage { get; set; }
    private bool IsVisibleReturnMesssage { get; set; } = false;


    protected async override Task OnInitializedAsync()
    {

        //user = new User();
        await base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    protected async override Task OnParametersSetAsync()
    {
        registerUserRequest = new RegisterUserRequest() { Username = username };
        await base.OnParametersSetAsync();

    }


    private async Task RegisterSubmit(RegisterUserRequest registerUserRequest)
    {
        try
        {
            registerUserRequest.TokenConfirm = token;
            var returnedUser = await authService.RegisterUserAsync(registerUserRequest);

            if (returnedUser.IsSuccess)
            {
                NavigationManager.NavigateTo("/login", false);
            }
            else
            {
                ReturnMesssage = returnedUser.Error;
            }
        }
        catch (Exception ex)
        {
            ReturnMesssage = ex.Message;
        }

        StateHasChanged();
    }
}
