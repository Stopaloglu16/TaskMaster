@page "/taskmanager"

@using Application.Aggregates.TaskListAggregate.Commands.CreateUpdate
@using Application.Aggregates.TaskListAggregate.Queries
@using Application.Common.Models
@using Domain.Enums
@using WebsiteApp.Services
﻿@using Microsoft.AspNetCore.Components.QuickGrid
@using TaskMasterRazorClassLibrary

@inject IWebApiService<TaskListDto, TaskListDto> _taskListService
@inject IWebApiService<TaskListFormRequest, TaskListFormRequest> _taskListFormService
@inject IWebApiService<SelectListItem, SelectListItem> _taskListSelectService
@inject IWebApiService<TaskListFormRequest, HttpResponseMessage> _taskListFormCrudService
@inject NavigationManager NavigationManager

@inject NotificationService NotificationService

@rendermode InteractiveServer

<PageTitle>Task Manager</PageTitle>

<div class="container mt-3">
    <div class="card">
        <div class="card-header">
            <RadzenBreadCrumb>
                <RadzenBreadCrumbItem Path="/home" Text="Home" />
                <RadzenBreadCrumbItem Text="Task Manager" />
            </RadzenBreadCrumb>
        </div>
        <div class="card-header">
            <RadzenButton Icon="add" Text="New" ButtonStyle="ButtonStyle.Primary" Variant="Variant.Flat" Size="ButtonSize.Medium"
                          class="rz-my-1 rz-ms-1" Click="@(args => EditTasklist(0))" />
        </div>
        <div class="card-body">
            <RadzenStack Gap="1rem">
                <RadzenDataGrid @ref=@gridItemsProvider TItem="TaskListDto" Data="@tasklistList" LoadData="@LoadData" IsLoading="@isLoading"
                                AllowPaging="true" AllowSorting="false" PagerHorizontalAlign="HorizontalAlign.Center"
                                PageSizeOptions="@pageSizeOptions" ShowPagingSummary="@showPagerSummary"
                                Count="@totalItemCount">

                    <PagingSummaryTemplate>
                        <RadzenIcon Icon="database" Style="color: var(--rz-primary); font-size: var(--rz-pager-summary-font-size);" />
                        Displaying page @context.CurrentPage of @context.NumberOfPages <b>(total @context.TotalCount records)</b>
                    </PagingSummaryTemplate>
                    <Columns>
                        <RadzenDataGridColumn Title="Task Name">
                            <Template Context="task">
                                <a href="@($"taskitemmanager/{task.Id}")">@(task.Title)</a>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(TaskListDto.DueDate)" Title="DueDate" />
                        <RadzenDataGridColumn Property="@nameof(TaskListDto.CompletedDate)" Title="CompletedDate" />
                        <RadzenDataGridColumn Property="@nameof(TaskListDto.AssignedTo)" Title="AssignedTo" />
                        <RadzenDataGridColumn Title="Progress">
                            <Template Context="task">
                                <RadzenProgressBar Value="@(task.TaskItemCompletedCount)"
                                                   Max="@(task.TaskItemCount)"
                                                   Unit="@($" out of {task.TaskItemCount}")" />
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn TextAlign="TextAlign.Right" Frozen="true" FrozenPosition="FrozenColumnPosition.Right">
                            <Template Context="task">
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                              class="rz-my-1 rz-ms-1" Click="@(async () => await EditTasklist(task.Id))" />
                                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                              class="rz-my-1 rz-ms-1" Click="@(() => ActionItem(task, 1))" />
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            </RadzenStack>
        </div>
    </div>
</div>


@if (TaskListModalOpen)
{
    <TaskListModal taskListFormRequest="@taskListFormRequest"
                   taskUserList="@taskUserList"
                   OnClose="@SaveTaskListModel">
    </TaskListModal>
}

@if (ActionPerItemModalOpen)
{
    <ActionPerItemModal ActionItemText="@ActionItemText" 
                        ActionText="@ActionName" 
                        OnCloseModal="@OnActionPerItemModalClose">
    </ActionPerItemModal>
}

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    RadzenDataGrid<TaskListDto> gridItemsProvider;
    IEnumerable<TaskListDto> tasklistList;
    ODataEnumerable<TaskListDto> taskListDtos;

    bool showPagerSummary = true;

    bool isLoading;
    private int totalItemCount = 0;
    private int pageNumber = 1;
    private int itemsPerPage = 10;
    IEnumerable<int> pageSizeOptions = new int[] { 5, 10, 20, 30 };

    public bool TaskListModalOpen = false;
    public TaskListFormRequest taskListFormRequest { get; set; }
    List<SelectListItem> taskUserList { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var authState = await authenticationState;
        var user = authState.User;
        if (!user.Identity.IsAuthenticated)
            NavigationManager.NavigateTo("/", true);

        await base.OnInitializedAsync();

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadData(LoadDataArgs args)
    {
        try
        {
            isLoading = true;
            itemsPerPage = args.Top ?? 10;

            int pageNumber = ((int)args.Skip / itemsPerPage) + 1;


            var response = await _taskListService.GetPagingDataAsync(
            $"tasklist?PageNumber={pageNumber}&PageSize={itemsPerPage}&OrderBy=Id&IsDescending=false");

            if (response != null)
            {
                totalItemCount = response.TotalCount;

                taskListDtos = response.Items.AsODataEnumerable();
                // Return the grid data
                tasklistList = response.Items;
            }
            else
            {
                // Log or handle the null response scenario
                Console.Error.WriteLine("Failed to load task list data. API returned null.");
            }

            isLoading = false;
        }
        catch (Exception)
        {
            throw;
        }
    }

    //With adding Page="OnPage"
    // void OnPage(PagerEventArgs args)
    // {
    //     Console.WriteLine("here now");
    // }



    #region Modal

    private async Task ModalSuccess()
    {
        TaskListModalOpen = false;
        ActionPerItemModalOpen = false;

        await gridItemsProvider.RefreshDataAsync();

        StateHasChanged();
    }

    protected async Task EditTasklist(int Id)
    {

        taskUserList = await _taskListSelectService.GetAllDataAsync("Users/taskuserselectlist", true);

        if (Id > 0)
        {
            var apiReturn = await _taskListFormService.GetDataByIdAsync($"tasklist/{Id}");
            taskListFormRequest = apiReturn;
        }
        else
        {
            taskListFormRequest = new TaskListFormRequest() { Title = "", DueDate = DateOnly.FromDateTime(DateTime.Now.AddDays(1)) };
        }

        TaskListModalOpen = true;

    }

    protected async Task SaveTaskListModel(TaskListFormRequest taskListFormRequest)
    {
        if (taskListFormRequest == null)
        {
            TaskListModalOpen = false;
        }
        else
        {
            if (taskListFormRequest.AssignedToId == 0)
                taskListFormRequest.AssignedToId = null;

            HttpResponseMessage apiReturn;
            if (taskListFormRequest.Id > 0)
            {
                apiReturn = await _taskListFormCrudService.UpdateAsync("tasklist", taskListFormRequest.Id, taskListFormRequest);
            }
            else
            {
                apiReturn = await _taskListFormCrudService.SaveAsync("tasklist", taskListFormRequest);
            }

            if (apiReturn.IsSuccessStatusCode)
            {
                //toastService.ShowSuccess($"{taskListFormRequest.Title} is {ActionNameModel.Saved}");

                ShowNotification(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = ActionNameModel.Saved,
                        Detail = $"{taskListFormRequest.Title} is {ActionNameModel.Saved}",
                        Duration = 4000
                    });

                await ModalSuccess();
            }

        }
    }

    #endregion

    void ShowNotification(NotificationMessage message)
    {
        NotificationService.Notify(message);
    }

    #region ActionPerItemModal

    private bool ActionPerItemModalOpen { get; set; } = false;

    private int ItemIdAction;
    private string ActionItemText = "";
    public string ActionName { get; set; }
    private int ActionTypeId { get; set; }

    public void ActionItem(TaskListDto taskListDto, int _ActionTypeId)
    {
        ItemIdAction = taskListDto.Id;
        ActionItemText = taskListDto.Title;
        ActionTypeId = _ActionTypeId;

        if (ActionTypeId == 1)
        {
            ActionName = ActionNameModel.Delete;
        }

        ActionPerItemModalOpen = true;
    }



    private async Task OnActionPerItemModalClose(bool RtnAction)
    {
        if (RtnAction == false)
        {
            ActionPerItemModalOpen = false;
        }
        else
        {

            bool IsSuccess = false;

            if (ActionTypeId == 1)
            {
                var apiReturn = await _taskListService.DeleteAsync($"tasklist", ItemIdAction);
                IsSuccess = apiReturn.IsSuccessStatusCode;
            }


            if (IsSuccess)
            {
                //toastService.ShowSuccess($"{ActionItemText} {ActionName}d");

                ShowNotification(new NotificationMessage
                    {
                        Severity = NotificationSeverity.Warning,
                        Summary = "Deleted",
                        Detail = $"{ActionItemText} {ActionName}d",
                        Duration = 4000
                    });

                await ModalSuccess();
            }
        }
    }

    #endregion
}
